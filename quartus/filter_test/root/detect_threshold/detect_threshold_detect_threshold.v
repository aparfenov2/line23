// -------------------------------------------------------------
// 
// File Name: hdlsrc\root\detect_threshold\detect_threshold_detect_threshold.v
// Created: 2014-09-23 01:54:03
// 
// Generated by MATLAB 8.3 and HDL Coder 3.4
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: detect_threshold_detect_threshold
// Source Path: detect_threshold
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module detect_threshold_detect_threshold
          (
           clk,
           reset,
           enb,
           In1,
           Out1,
           dbg_0,
           dbg_1
          );


  input   clk;
  input   reset;
  input   enb;
  input   signed [15:0] In1;  // int16
  output  Out1;
  output  signed [15:0] dbg_0;  // int16
  output  signed [15:0] dbg_1;  // int16


  reg [7:0] Counter_Limited1_count;  // ufix8
  wire [7:0] Counter_Limited1_out1;  // uint8
  wire [7:0] Constant3_out1;  // uint8
  wire Relational_Operator4_relop1;
  wire signed [15:0] max_running1_out1;  // int16
  reg  Unit_Delay_Resettable1_zero_delay;
  reg signed [15:0] Unit_Delay_Resettable1_switch_delay;  // sfix16
  wire Unit_Delay_Resettable1_1;
  wire signed [15:0] out0;  // int16
  wire [7:0] Constant4_out1;  // uint8
  wire Relational_Operator5_relop1;
  wire Relational_Operator5_out1;
  reg signed [15:0] Unit_Delay_Enabled1_out1;  // int16
  reg [15:0] Counter_Limited_count;  // ufix16
  wire [15:0] Counter_Limited_out1;  // uint16
  wire [15:0] Constant1_out1;  // uint16
  wire Relational_Operator1_relop1;
  wire signed [15:0] max_running_out1;  // int16
  reg  Unit_Delay_Resettable_zero_delay;
  reg signed [15:0] Unit_Delay_Resettable_switch_delay;  // sfix16
  wire Unit_Delay_Resettable_1;
  wire signed [15:0] out0_1;  // int16
  wire [15:0] Constant2_out1;  // uint16
  wire Relational_Operator2_relop1;
  wire Relational_Operator2_out1;
  reg signed [15:0] Unit_Delay_Enabled_out1;  // int16
  wire signed [31:0] Gain_mul_temp;  // sfix32_En16
  wire signed [15:0] Gain_out1;  // int16
  wire signed [15:0] Sum_out1;  // int16
  wire rel_float_relop1;
  wire signed [15:0] Constant5_out1;  // int16
  wire rel_bottom_relop1;
  wire rel_float_out1;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 32
  always @(posedge clk or posedge reset)
    begin : Counter_Limited1_process
      if (reset == 1'b1) begin
        Counter_Limited1_count <= 8'b00000000;
      end
      else begin
        if (enb) begin
          if (Counter_Limited1_count == 8'b00100000) begin
            Counter_Limited1_count <= 8'b00000000;
          end
          else begin
            Counter_Limited1_count <= Counter_Limited1_count + 1;
          end
        end
      end
    end

  assign Counter_Limited1_out1 = Counter_Limited1_count;



  assign Constant3_out1 = 8'd0;



  assign Relational_Operator4_relop1 = (Counter_Limited1_out1 == Constant3_out1 ? 1'b1 :
              1'b0);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Resettable1_process
      if (reset == 1'b1) begin
        Unit_Delay_Resettable1_zero_delay <= 1'b1;
        Unit_Delay_Resettable1_switch_delay <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Resettable1_zero_delay <= 1'b0;
          if (Relational_Operator4_relop1 == 1'b1) begin
            Unit_Delay_Resettable1_switch_delay <= 16'sb0000000000000000;
          end
          else begin
            Unit_Delay_Resettable1_switch_delay <= max_running1_out1;
          end
        end
      end
    end

  assign Unit_Delay_Resettable1_1 = (Relational_Operator4_relop1 || Unit_Delay_Resettable1_zero_delay ? 1'b1 :
              1'b0);
  assign out0 = (Unit_Delay_Resettable1_1 == 32'sd1 ? 16'sb0000000000000000 :
              Unit_Delay_Resettable1_switch_delay);



  detect_threshold_max_running1   u_max_running1   (.in0_0(In1),  // int16
                                                    .in0_1(out0),  // int16
                                                    .out0(max_running1_out1)  // int16
                                                    );

  assign Constant4_out1 = 8'd32;



  assign Relational_Operator5_relop1 = (Counter_Limited1_out1 == Constant4_out1 ? 1'b1 :
              1'b0);



  assign Relational_Operator5_out1 = Relational_Operator5_relop1;

  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled1_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled1_out1 <= 16'sb0000001001011000;
      end
      else begin
        if (enb && Relational_Operator5_out1) begin
          Unit_Delay_Enabled1_out1 <= max_running1_out1;
        end
      end
    end



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 6000
  always @(posedge clk or posedge reset)
    begin : Counter_Limited_process
      if (reset == 1'b1) begin
        Counter_Limited_count <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          if (Counter_Limited_count == 16'b0001011101110000) begin
            Counter_Limited_count <= 16'b0000000000000000;
          end
          else begin
            Counter_Limited_count <= Counter_Limited_count + 1;
          end
        end
      end
    end

  assign Counter_Limited_out1 = Counter_Limited_count;



  assign Constant1_out1 = 16'd0;



  assign Relational_Operator1_relop1 = (Counter_Limited_out1 == Constant1_out1 ? 1'b1 :
              1'b0);



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Resettable_process
      if (reset == 1'b1) begin
        Unit_Delay_Resettable_zero_delay <= 1'b1;
        Unit_Delay_Resettable_switch_delay <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Unit_Delay_Resettable_zero_delay <= 1'b0;
          if (Relational_Operator1_relop1 == 1'b1) begin
            Unit_Delay_Resettable_switch_delay <= 16'sb0000000000000000;
          end
          else begin
            Unit_Delay_Resettable_switch_delay <= max_running_out1;
          end
        end
      end
    end

  assign Unit_Delay_Resettable_1 = (Relational_Operator1_relop1 || Unit_Delay_Resettable_zero_delay ? 1'b1 :
              1'b0);
  assign out0_1 = (Unit_Delay_Resettable_1 == 32'sd1 ? 16'sb0000000000000000 :
              Unit_Delay_Resettable_switch_delay);



  detect_threshold_max_running   u_max_running   (.in0_0(In1),  // int16
                                                  .in0_1(out0_1),  // int16
                                                  .out0(max_running_out1)  // int16
                                                  );

  assign Constant2_out1 = 16'd6000;



  assign Relational_Operator2_relop1 = (Counter_Limited_out1 == Constant2_out1 ? 1'b1 :
              1'b0);



  assign Relational_Operator2_out1 = Relational_Operator2_relop1;

  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_out1 <= 16'sb0000001001011000;
      end
      else begin
        if (enb && Relational_Operator2_out1) begin
          Unit_Delay_Enabled_out1 <= max_running_out1;
        end
      end
    end



  assign Gain_mul_temp = 19661 * Unit_Delay_Enabled_out1;
  assign Gain_out1 = Gain_mul_temp[31:16];



  assign Sum_out1 = Unit_Delay_Enabled_out1 - Gain_out1;



  assign rel_float_relop1 = (Unit_Delay_Enabled1_out1 > Sum_out1 ? 1'b1 :
              1'b0);



  assign Constant5_out1 = 16'sd300;



  assign rel_bottom_relop1 = (Unit_Delay_Enabled1_out1 > Constant5_out1 ? 1'b1 :
              1'b0);



  assign rel_float_out1 = rel_float_relop1 & rel_bottom_relop1;



  assign Out1 = rel_float_out1;

  assign dbg_0 = Sum_out1;

  assign dbg_1 = Unit_Delay_Enabled1_out1;

endmodule  // detect_threshold_detect_threshold

