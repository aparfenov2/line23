// -------------------------------------------------------------
// 
// File Name: hdlsrc\root\detect_tone.v
// Created: 2014-09-23 01:54:05
// 
// Generated by MATLAB 8.3 and HDL Coder 3.4
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.08333e-05
// Target subsystem base rate: 2.08333e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        2.08333e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// det_out_0                     ce_out        2.08333e-05
// det_out_1                     ce_out        2.08333e-05
// det_out_2                     ce_out        2.08333e-05
// det_out1_0                    ce_out        2.08333e-05
// det_out1_1                    ce_out        2.08333e-05
// det_out1_2                    ce_out        2.08333e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: detect_tone
// Source Path: root/detect_tone
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module detect_tone
          (
           clk,
           reset,
           clk_enable,
           adc_in,
           ce_out,
           det_out_0,
           det_out_1,
           det_out_2,
           det_out1_0,
           det_out1_1,
           det_out1_2
          );


  input   clk;
  input   reset;
  input   clk_enable;
  input   [11:0] adc_in;  // ufix12
  output  ce_out;
  output  det_out_0;  // boolean
  output  det_out_1;  // boolean
  output  det_out_2;  // boolean
  output  det_out1_0;  // boolean
  output  det_out1_1;  // boolean
  output  det_out1_2;  // boolean


  wire signed [15:0] Abs1_out1;  // int16
  wire detect_threshold_out1;
  wire signed [15:0] detect_threshold_out2_0;  // int16
  wire signed [15:0] detect_threshold_out2_1;  // int16
  wire signed [15:0] Abs2_out1;  // int16
  wire detect_threshold1_out1;
  wire signed [15:0] detect_threshold1_out2_0;  // int16
  wire signed [15:0] detect_threshold1_out2_1;  // int16
  wire signed [15:0] Abs3_out1;  // int16
  wire detect_threshold2_out1;
  wire signed [15:0] detect_threshold2_out2_0;  // int16
  wire signed [15:0] detect_threshold2_out2_1;  // int16
  wire signed [15:0] Abs4_out1;  // int16
  wire detect_threshold3_out1;
  wire signed [15:0] detect_threshold3_out2_0;  // int16
  wire signed [15:0] detect_threshold3_out2_1;  // int16
  wire signed [15:0] Abs5_out1;  // int16
  wire detect_threshold4_out1;
  wire signed [15:0] detect_threshold4_out2_0;  // int16
  wire signed [15:0] detect_threshold4_out2_1;  // int16
  wire signed [15:0] Abs6_out1;  // int16
  wire detect_threshold5_out1;
  wire signed [15:0] detect_threshold5_out2_0;  // int16
  wire signed [15:0] detect_threshold5_out2_1;  // int16
  wire signed [15:0] cmd;  // int16
  wire signed [16:0] Abs1_y;  // sfix17
  wire signed [15:0] clk_1;  // int16
  wire signed [16:0] Abs2_y;  // sfix17
  wire signed [15:0] sync;  // int16
  wire signed [16:0] Abs3_y;  // sfix17
  wire signed [15:0] cmd_1;  // int16
  wire signed [16:0] Abs4_y;  // sfix17
  wire signed [15:0] clk_2;  // int16
  wire signed [16:0] Abs5_y;  // sfix17
  wire signed [15:0] sync_1;  // int16
  wire signed [16:0] Abs6_y;  // sfix17


  f3475   u_f3475   (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .Input_rsvd(adc_in),  // ufix12
                     .Output_rsvd(cmd)  // int16
                     );

  assign Abs1_y = (cmd < 16'sb0000000000000000 ?  - ({cmd[15], cmd}) :
              {cmd[15], cmd});
  assign Abs1_out1 = Abs1_y[15:0];



  detect_threshold_detect_threshold   u_detect_threshold   (.clk(clk),
                                                            .reset(reset),
                                                            .enb(clk_enable),
                                                            .In1(Abs1_out1),  // int16
                                                            .Out1(detect_threshold_out1),
                                                            .dbg_0(detect_threshold_out2_0),  // int16
                                                            .dbg_1(detect_threshold_out2_1)  // int16
                                                            );

  assign det_out_0 = detect_threshold_out1;

  f5110   u_f5110   (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .Input_rsvd(adc_in),  // ufix12
                     .Output_rsvd(clk_1)  // int16
                     );

  assign Abs2_y = (clk_1 < 16'sb0000000000000000 ?  - ({clk_1[15], clk_1}) :
              {clk_1[15], clk_1});
  assign Abs2_out1 = Abs2_y[15:0];



  detect_threshold_detect_threshold   u_detect_threshold1   (.clk(clk),
                                                             .reset(reset),
                                                             .enb(clk_enable),
                                                             .In1(Abs2_out1),  // int16
                                                             .Out1(detect_threshold1_out1),
                                                             .dbg_0(detect_threshold1_out2_0),  // int16
                                                             .dbg_1(detect_threshold1_out2_1)  // int16
                                                             );

  assign det_out_1 = detect_threshold1_out1;

  f7395   u_f7395   (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .Input_rsvd(adc_in),  // ufix12
                     .Output_rsvd(sync)  // int16
                     );

  assign Abs3_y = (sync < 16'sb0000000000000000 ?  - ({sync[15], sync}) :
              {sync[15], sync});
  assign Abs3_out1 = Abs3_y[15:0];



  detect_threshold_detect_threshold   u_detect_threshold2   (.clk(clk),
                                                             .reset(reset),
                                                             .enb(clk_enable),
                                                             .In1(Abs3_out1),  // int16
                                                             .Out1(detect_threshold2_out1),
                                                             .dbg_0(detect_threshold2_out2_0),  // int16
                                                             .dbg_1(detect_threshold2_out2_1)  // int16
                                                             );

  assign det_out_2 = detect_threshold2_out1;

  f4240   u_f4240   (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .Input_rsvd(adc_in),  // ufix12
                     .Output_rsvd(cmd_1)  // int16
                     );

  assign Abs4_y = (cmd_1 < 16'sb0000000000000000 ?  - ({cmd_1[15], cmd_1}) :
              {cmd_1[15], cmd_1});
  assign Abs4_out1 = Abs4_y[15:0];



  detect_threshold_detect_threshold   u_detect_threshold3   (.clk(clk),
                                                             .reset(reset),
                                                             .enb(clk_enable),
                                                             .In1(Abs4_out1),  // int16
                                                             .Out1(detect_threshold3_out1),
                                                             .dbg_0(detect_threshold3_out2_0),  // int16
                                                             .dbg_1(detect_threshold3_out2_1)  // int16
                                                             );

  assign det_out1_0 = detect_threshold3_out1;

  f6205   u_f6205   (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .Input_rsvd(adc_in),  // ufix12
                     .Output_rsvd(clk_2)  // int16
                     );

  assign Abs5_y = (clk_2 < 16'sb0000000000000000 ?  - ({clk_2[15], clk_2}) :
              {clk_2[15], clk_2});
  assign Abs5_out1 = Abs5_y[15:0];



  detect_threshold_detect_threshold   u_detect_threshold4   (.clk(clk),
                                                             .reset(reset),
                                                             .enb(clk_enable),
                                                             .In1(Abs5_out1),  // int16
                                                             .Out1(detect_threshold4_out1),
                                                             .dbg_0(detect_threshold4_out2_0),  // int16
                                                             .dbg_1(detect_threshold4_out2_1)  // int16
                                                             );

  assign det_out1_1 = detect_threshold4_out1;

  f8900   u_f8900   (.clk(clk),
                     .reset(reset),
                     .enb(clk_enable),
                     .Input_rsvd(adc_in),  // ufix12
                     .Output_rsvd(sync_1)  // int16
                     );

  assign Abs6_y = (sync_1 < 16'sb0000000000000000 ?  - ({sync_1[15], sync_1}) :
              {sync_1[15], sync_1});
  assign Abs6_out1 = Abs6_y[15:0];



  detect_threshold_detect_threshold   u_detect_threshold5   (.clk(clk),
                                                             .reset(reset),
                                                             .enb(clk_enable),
                                                             .In1(Abs6_out1),  // int16
                                                             .Out1(detect_threshold5_out1),
                                                             .dbg_0(detect_threshold5_out2_0),  // int16
                                                             .dbg_1(detect_threshold5_out2_1)  // int16
                                                             );

  assign det_out1_2 = detect_threshold5_out1;

  assign ce_out = clk_enable;


endmodule  // detect_tone

